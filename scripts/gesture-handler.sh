#!/usr/bin/env bash

# =====================================================
# Gesture Support for i3 Window Manager
# Touchpad gesture integration with libinput-gestures
# =====================================================

set -euo pipefail

# Configuration
CONFIG_FILE="$HOME/.config/libinput-gestures.conf"
CUSTOM_CONFIG="$HOME/.config/gesture-handler/config"
LOG_FILE="$HOME/.cache/gesture-handler.log"

# Logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Initialize gesture system
init_gestures() {
    mkdir -p "$(dirname "$CUSTOM_CONFIG")" "$(dirname "$LOG_FILE")"
    
    # Install libinput-gestures if not present
    if ! command -v libinput-gestures &>/dev/null; then
        log "Installing libinput-gestures..."
        
        # Add user to input group
        sudo usermod -a -G input "$USER"
        
        # Install from package manager or build from source
        if command -v apt &>/dev/null; then
            sudo apt update
            sudo apt install -y libinput-tools xdotool wmctrl
            
            # Install from GitHub if not in repos
            if ! command -v libinput-gestures &>/dev/null; then
                cd /tmp
                git clone https://github.com/bulletmark/libinput-gestures.git
                cd libinput-gestures
                sudo make install
                cd ..
                rm -rf libinput-gestures
            fi
        fi
    fi
    
    # Create gesture configuration
    create_gesture_config
    
    log "Gesture system initialized"
}

# Create libinput-gestures configuration
create_gesture_config() {
    cat > "$CONFIG_FILE" << 'EOF'
# Gesture configuration for i3 window manager
# Generated by gesture-handler.sh

# Workspace navigation
gesture swipe left 3 i3-msg workspace next
gesture swipe right 3 i3-msg workspace prev
gesture swipe up 3 i3-msg workspace back_and_forth

# Window management
gesture swipe left 4 i3-msg focus right
gesture swipe right 4 i3-msg focus left
gesture swipe up 4 i3-msg focus up
gesture swipe down 4 i3-msg focus down

# Application control
gesture pinch in 2 i3-msg fullscreen toggle
gesture pinch out 2 i3-msg floating toggle

# Advanced gestures
gesture swipe up 4 ~/.local/bin/smart-window-switcher.sh
gesture swipe down 4 rofi -modi drun -show drun -theme ~/.config/rofi/themes/launcher.rasi

# Volume and brightness (if supported)
gesture swipe left 2 pactl set-sink-volume @DEFAULT_SINK@ +5%
gesture swipe right 2 pactl set-sink-volume @DEFAULT_SINK@ -5%
gesture swipe up 2 brightnessctl set +10%
gesture swipe down 2 brightnessctl set 10%-

# Custom gesture commands
gesture pinch in 3 ~/.local/bin/gesture-custom.sh zoom_out
gesture pinch out 3 ~/.local/bin/gesture-custom.sh zoom_in
gesture pinch clockwise 3 ~/.local/bin/gesture-custom.sh rotate_right
gesture pinch anticlockwise 3 ~/.local/bin/gesture-custom.sh rotate_left

# Power gestures
gesture swipe down 3 ~/.config/rofi/scripts/powermenu.sh
gesture pinch in 4 i3lock-fancy

# Scratchpad gestures
gesture swipe up 5 i3-msg scratchpad show
gesture swipe down 5 i3-msg move scratchpad
EOF

    log "Gesture configuration created"
}

# Create custom gesture handler
create_custom_handler() {
    cat > ~/.local/bin/gesture-custom.sh << 'EOF'
#!/usr/bin/env bash

# Custom gesture handler for advanced actions

case "$1" in
    "zoom_in")
        # Increase window size
        i3-msg "resize grow width 50px; resize grow height 50px"
        ;;
    "zoom_out")
        # Decrease window size
        i3-msg "resize shrink width 50px; resize shrink height 50px"
        ;;
    "rotate_right")
        # Cycle through layouts
        i3-msg "layout toggle split"
        ;;
    "rotate_left")
        # Reverse cycle through layouts
        i3-msg "layout toggle all"
        ;;
    "workspace_overview")
        # Show workspace overview (if available)
        rofi -modi window -show window -theme ~/.config/rofi/themes/launcher.rasi
        ;;
    *)
        echo "Unknown gesture: $1"
        ;;
esac
EOF

    chmod +x ~/.local/bin/gesture-custom.sh
    log "Custom gesture handler created"
}

# Start gesture service
start_gestures() {
    log "Starting gesture service..."
    
    # Stop any existing service
    libinput-gestures-setup stop 2>/dev/null || true
    
    # Setup and start
    libinput-gestures-setup autostart
    libinput-gestures-setup start
    
    log "Gesture service started"
    
    if command -v notify-send &>/dev/null; then
        notify-send -t 3000 "Gestures" "Touchpad gestures enabled"
    fi
}

# Stop gesture service
stop_gestures() {
    log "Stopping gesture service..."
    
    libinput-gestures-setup stop
    libinput-gestures-setup autostop
    
    log "Gesture service stopped"
    
    if command -v notify-send &>/dev/null; then
        notify-send -t 3000 "Gestures" "Touchpad gestures disabled"
    fi
}

# Show gesture status
show_status() {
    echo "Gesture Handler Status"
    echo "====================="
    
    if command -v libinput-gestures &>/dev/null; then
        echo "libinput-gestures: Installed"
        
        if pgrep -f libinput-gestures &>/dev/null; then
            echo "Service: Running"
        else
            echo "Service: Stopped"
        fi
        
        if [[ -f "$CONFIG_FILE" ]]; then
            echo "Configuration: Present"
            local gesture_count=$(grep -c "^gesture" "$CONFIG_FILE" 2>/dev/null || echo "0")
            echo "Configured gestures: $gesture_count"
        else
            echo "Configuration: Missing"
        fi
    else
        echo "libinput-gestures: Not installed"
    fi
    
    # Show available touchpad devices
    echo
    echo "Available touchpad devices:"
    libinput list-devices 2>/dev/null | grep -A5 -B5 "Touchpad" || echo "None found"
}

# Test gestures
test_gestures() {
    echo "Testing gesture recognition..."
    echo "Perform gestures on your touchpad. Press Ctrl+C to stop."
    
    # Run libinput debug-events for touchpad
    sudo libinput debug-events --device /dev/input/event* | grep -i gesture
}

# Main function
main() {
    case "${1:-start}" in
        "start"|"--start")
            init_gestures
            create_custom_handler
            start_gestures
            ;;
        "stop"|"--stop")
            stop_gestures
            ;;
        "restart")
            stop_gestures
            sleep 1
            start_gestures
            ;;
        "status")
            show_status
            ;;
        "test")
            test_gestures
            ;;
        "install")
            init_gestures
            create_custom_handler
            ;;
        "config")
            ${EDITOR:-nano} "$CONFIG_FILE"
            ;;
        "help"|"--help")
            cat << EOF
Gesture Handler for i3

Usage: $0 [COMMAND]

Commands:
    start       Initialize and start gestures (default)
    stop        Stop gesture service
    restart     Restart gesture service
    status      Show current status
    test        Test gesture recognition
    install     Install and configure gestures
    config      Edit gesture configuration
    help        Show this help

Gestures:
    3-finger swipe left/right: Switch workspaces
    3-finger swipe up: Back and forth workspace
    4-finger swipe: Focus windows
    Pinch in/out: Fullscreen/floating toggle
    5-finger gestures: Scratchpad control
EOF
            ;;
        *)
            echo "Unknown command: $1"
            echo "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
}

main "$@"
